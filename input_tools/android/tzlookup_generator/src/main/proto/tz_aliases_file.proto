/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

option java_package = "com.android.libcore.timezone.tzaliases.proto";
option java_multiple_files = false;

package com.android.libcore.timezone.tzaliases.proto;

// Information about Olson IDs used by Android.
message TimeZoneAliases {
    // The IANA TZDB version the data was generated from.
    optional string ianaVersion = 1;
    // Aliases that are always correct, i.e. obsoleted IDs.
    repeated TimeZoneLink timeZoneLink = 2;
    // Aliases that are time dependent. i.e. where time zones have become equivalent over time.
    repeated TimeZoneReplacement timeZoneReplacement = 3;
}

// An alias / synonym when one time zone ID is just direct synonym for another.
//
// These will typically be as you'd expect from looking at the IANA tzdb backward file. However, the
// IDs preferred by Android are determined by countryzones.txt, which could choose to continue using
// an old ID, in which case the link may be reversed. This reversal is expected when an older
// version of ICU doesn't have strings for a new ID because it was added after an Android release
// launched.
message TimeZoneLink {
    // The alternative ID. This will typically be an obsoleted IANA ID.
    required string alternativeId = 1;
    // The Android preferred ID. This will typically be a newer / more correct Olson ID.
    required string preferredId = 2;
}

// The functional replacement of one time zone by another after a point in time.
// Computed by looking at offset behavior / zone metadata.
message TimeZoneReplacement {
    // The Olson ID that was replaced / ceased to be distinct.
    required string replacedId = 1;
    // The Olson ID that is the better / to use in place of replacedId.
    required string replacementId = 2;
    // When replacementId replaced replacedId. Milliseconds from the start of the Unix epoch.
    required int64 fromMillis = 3;
}
